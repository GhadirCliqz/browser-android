System.register('mobile-history/history', ['core/cliqz', 'core/templates'], function (_export) {
  /* global document, osAPI, Hammer, math */

  'use strict';var utils, handlebars, historyTimer, allHistory, allFavorites, History;

  function showHistory(history) {
    clearTimeout(historyTimer);

    allHistory = history;
    var queries = utils.getLocalStorage().getObject('recentQueries', []).reverse();

    for (var i = 0; i < history.length; i++) {
      history[i].domain = history[i].url.match(/^(?:https?:\/\/)?(?:www\.)?([^\/]+)/i)[1];
    }

    var historyWithLogos = addLogos(history);
    var data = mixHistoryWithQueries(queries, historyWithLogos);
    History.displayData(data, History.showOnlyFavorite);
  }

  function showFavorites(favorites) {
    clearTimeout(historyTimer);

    allFavorites = favorites;

    for (var i = 0; i < favorites.length; i++) {
      favorites[i].domain = favorites[i].url.match(/^(?:https?:\/\/)?(?:www\.)?([^\/]+)/i)[1];
    }

    var favoritesWithLogos = addLogos(favorites);

    History.displayData(favoritesWithLogos, History.showOnlyFavorite);
  }

  function addLogos(list) {
    return list.map(function (item) {
      var details = utils.getDetailsFromUrl(item.url);
      item.logo = utils.getLogoDetails(details);
      return item;
    });
  }

  function sendShowTelemetry(data) {
    var queryCount = data.filter(function (item) {
      return item.query;
    }).length,
        urlCount = data.filter(function (item) {
      return item.url;
    }).length;
    utils.telemetry({
      type: History.showOnlyFavorite ? 'favorites' : 'history',
      action: 'show',
      active_day_count: data.length - queryCount - urlCount,
      query_count: queryCount,
      url_count: urlCount
    });
  }

  function mixHistoryWithQueries(queries, history) {
    var data = [];
    var hi = 0;
    var qi = 0;
    var date = '';
    while (true) {
      if (hi >= history.length || qi >= queries.length) {
        break;
      }

      if (history[hi].timestamp <= queries[qi].timestamp) {
        if (getDateFromTimestamp(history[hi].timestamp) !== date) {
          data.push({ date: getDateFromTimestamp(history[hi].timestamp) });
          date = getDateFromTimestamp(history[hi].timestamp);
        }
        data.push(history[hi]);

        hi++;
      } else {
        if (getDateFromTimestamp(queries[qi].timestamp) !== date) {
          data.push({ date: getDateFromTimestamp(queries[qi].timestamp) });
          date = getDateFromTimestamp(queries[qi].timestamp);
        }
        data.push(queries[qi]);
        qi++;
      }
    }
    while (hi < history.length) {
      if (getDateFromTimestamp(history[hi].timestamp) !== date) {
        data.push({ date: getDateFromTimestamp(history[hi].timestamp) });
        date = getDateFromTimestamp(history[hi].timestamp);
      }
      data.push(history[hi]);
      hi++;
    }
    while (qi < queries.length) {
      if (getDateFromTimestamp(queries[qi].timestamp) !== date) {
        data.push({ date: getDateFromTimestamp(queries[qi].timestamp) });
        date = getDateFromTimestamp(queries[qi].timestamp);
      }
      data.push(queries[qi]);
      qi++;
    }

    return data;
  }

  function displayData(data) {
    var isFavorite = arguments.length <= 1 || arguments[1] === undefined ? false : arguments[1];

    if (!handlebars.tplCache['conversations']) {
      return setTimeout(History.displayData, 100, data);
    }

    var template = isFavorite ? 'favorites' : 'conversations';
    document.body.innerHTML = handlebars.tplCache[template]({ data: data });

    var B = document.body,
        H = document.documentElement;

    var height = undefined;

    if (typeof document.height !== 'undefined') {
      height = document.height; // For webkit browsers
    } else {
        height = Math.max(B.scrollHeight, B.offsetHeight, H.clientHeight, H.scrollHeight, H.offsetHeight);
      }

    document.body.scrollTop = height + 100;

    attachListeners(document.getElementById('container'));
    History.sendShowTelemetry(data);
  }

  function getDateFromTimestamp(time) {
    var d = new Date(time);

    var days = d.getDate();
    days = days > 9 ? days : '0' + days;

    var months = d.getMonth() + 1;
    months = months > 9 ? months : '0' + months;

    var year = d.getFullYear();

    var formatedDate = days + '.' + months + '.' + year;
    return formatedDate;
  }
  function removeQuery(id) {
    var queries = utils.getLocalStorage().getObject('recentQueries', []);

    queries = queries.filter(function (query) {
      return id !== query.id;
    });
    utils.getLocalStorage().setObject('recentQueries', queries);
  }

  function removeHistoryItem(id) {
    allHistory = allHistory.filter(function (history) {
      return id !== history.id;
    });
    osAPI.removeHistoryItems([id]);
  }

  function removeItem(item) {
    var id = parseInt(item.dataset.id);
    item.getAttribute('class').indexOf('question') >= 0 ? removeQuery(id) : removeHistoryItem(id);
  }

  function unfavoriteItem(item) {
    var url = item.getAttribute('data');
    var title = item.dataset.title;
    osAPI.setFavorites([{ title: title, url: url }], false);
  }

  function init(onlyFavorites) {
    migrateQueries();
    History.showOnlyFavorite = onlyFavorites;
    update();
  }

  function update() {
    var callback = History.showOnlyFavorite ? showFavorites : showHistory;
    historyTimer = setTimeout(callback, 500, []);
    History.showOnlyFavorite ? osAPI.getFavorites('History.showFavorites') : osAPI.getHistoryItems('History.showHistory');
  }

  function clearHistory() {
    utils.getLocalStorage().setObject('recentQueries', []);
  }

  function clearFavorites() {
    utils.getLocalStorage().setObject('favoriteQueries', []);
  }

  function onElementClick(event) {
    var element = event.srcEvent.currentTarget;
    var type = element.getAttribute('class');
    var clickAction = type.indexOf('question') >= 0 ? osAPI.notifyQuery : osAPI.openLink;
    clickAction(element.getAttribute('data'));
    sendClickTelemetry(element);
  }

  function sendClickTelemetry(element) {
    var targeType = element.className.indexOf('question') >= 0 ? 'query' : 'url';
    utils.telemetry({
      type: History.showOnlyFavorite ? 'favorites' : 'history',
      action: 'click',
      target_type: targeType,
      target_index: parseInt(element.dataset.index),
      target_length: element.getAttribute('data').length,
      target_ts: parseInt(element.dataset.timestamp)
    });
  }

  function crossTransform(element, x) {
    var platforms = ['', '-webkit-', '-ms-'];
    platforms.forEach(function (platform) {
      element.style[platform + 'transform'] = 'translate3d(' + x + 'px, 0px, 0px)';
    });
  }

  function isElementDate(element) {
    return !element.dataset.timestamp;
  }

  function attachListeners(list) {
    var listItems = list.getElementsByTagName("li");

    for (var i = 0; i < listItems.length; i++) {
      if (!isElementDate(listItems[i])) {
        new Hammer(listItems[i]).on('pan', onSwipe);
        new Hammer(listItems[i]).on('panend', onSwipeEnd);
        new Hammer(listItems[i]).on('tap', onElementClick);
      }
    }
  }

  function removeDomElement(element) {
    var prev = element.previousElementSibling;
    var next = element.nextElementSibling;
    if (prev && isElementDate(prev)) {
      if (!next || isElementDate(next)) {
        element.parentElement.removeChild(prev);
      }
    }
    element.parentElement.removeChild(element);
  }

  function onSwipe(e) {
    crossTransform(e.srcEvent.currentTarget, e.deltaX);
  }
  function onSwipeEnd(e) {
    var element = e.srcEvent.currentTarget;
    if (math.abs(e.velocityX) < -1 || math.abs(e.deltaX) > 150) {
      History.showOnlyFavorite ? unfavoriteItem(element) : removeItem(element);
      removeDomElement(element);
    } else {
      crossTransform(element, 0);
    }
  }

  /**
    This function is for migration of history and favorite queries
    to extension version Mobile Extension 3.5.2
  **/
  function migrateQueries() {
    if (utils.getLocalStorage().getItem('isFavoritesRefactored')) {
      return;
    }
    var queries = utils.getLocalStorage().getObject('recentQueries', []);
    var favoriteQueries = utils.getLocalStorage().getObject('favoriteQueries', []);
    queries = queries.map(function (query) {
      if (query.favorite) {
        favoriteQueries.unshift({ query: query.query, timestamp: query.timestamp });
      }
      delete query.favorite;
      return query;
    });
    utils.getLocalStorage().setObject('recentQueries', queries);
    utils.getLocalStorage().setObject('favoriteQueries', favoriteQueries);
    utils.getLocalStorage().setItem('isFavoritesRefactored', true);
  }

  return {
    setters: [function (_coreCliqz) {
      utils = _coreCliqz.utils;
    }, function (_coreTemplates) {
      handlebars = _coreTemplates['default'];
    }],
    execute: function () {
      allHistory = [];
      allFavorites = [];
      History = {
        init: init,
        update: update,
        showHistory: showHistory,
        showFavorites: showFavorites,
        clearHistory: clearHistory,
        clearFavorites: clearFavorites,
        displayData: displayData,
        sendShowTelemetry: sendShowTelemetry,
        showOnlyFavorite: false
      };

      _export('default', History);
    }
  };
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm1vYmlsZS1oaXN0b3J5L2hpc3RvcnkuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBQUEsY0FBWSxDQUFDLHVCQU1ULFlBQVksRUFDWixVQUFVLEVBQ1YsWUFBWSxFQWdSWixPQUFPOztBQTlRWCxXQUFTLFdBQVcsQ0FBQyxPQUFPLEVBQUU7QUFDNUIsZ0JBQVksQ0FBQyxZQUFZLENBQUMsQ0FBQzs7QUFFM0IsY0FBVSxHQUFHLE9BQU8sQ0FBQztBQUNyQixRQUFNLE9BQU8sR0FBRyxLQUFLLENBQUMsZUFBZSxFQUFFLENBQUMsU0FBUyxDQUFDLGVBQWUsRUFBRSxFQUFFLENBQUMsQ0FBQyxPQUFPLEVBQUUsQ0FBQzs7QUFFakYsU0FBSyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLE9BQU8sQ0FBQyxNQUFNLEVBQUUsQ0FBQyxFQUFFLEVBQUU7QUFDdkMsYUFBTyxDQUFDLENBQUMsQ0FBQyxDQUFDLE1BQU0sR0FBRyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxzQ0FBc0MsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO0tBQ3JGOztBQUVELFFBQU0sZ0JBQWdCLEdBQUcsUUFBUSxDQUFDLE9BQU8sQ0FBQyxDQUFDO0FBQzNDLFFBQU0sSUFBSSxHQUFHLHFCQUFxQixDQUFDLE9BQU8sRUFBRSxnQkFBZ0IsQ0FBQyxDQUFDO0FBQzlELFdBQU8sQ0FBQyxXQUFXLENBQUMsSUFBSSxFQUFFLE9BQU8sQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDO0dBQ3JEOztBQUVELFdBQVMsYUFBYSxDQUFDLFNBQVMsRUFBRTtBQUNoQyxnQkFBWSxDQUFDLFlBQVksQ0FBQyxDQUFDOztBQUUzQixnQkFBWSxHQUFHLFNBQVMsQ0FBQzs7QUFFekIsU0FBSyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLFNBQVMsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxFQUFFLEVBQUU7QUFDekMsZUFBUyxDQUFDLENBQUMs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anMiLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG4vKiBnbG9iYWwgZG9jdW1lbnQsIG9zQVBJLCBIYW1tZXIsIG1hdGggKi9cblxuaW1wb3J0IHsgdXRpbHMgfSBmcm9tICdjb3JlL2NsaXF6JztcbmltcG9ydCBoYW5kbGViYXJzIGZyb20gJ2NvcmUvdGVtcGxhdGVzJztcblxudmFyIGhpc3RvcnlUaW1lcjtcbnZhciBhbGxIaXN0b3J5ID0gW107XG52YXIgYWxsRmF2b3JpdGVzID0gW107XG5cbmZ1bmN0aW9uIHNob3dIaXN0b3J5KGhpc3RvcnkpIHtcbiAgY2xlYXJUaW1lb3V0KGhpc3RvcnlUaW1lcik7XG5cbiAgYWxsSGlzdG9yeSA9IGhpc3Rvcnk7XG4gIGNvbnN0IHF1ZXJpZXMgPSB1dGlscy5nZXRMb2NhbFN0b3JhZ2UoKS5nZXRPYmplY3QoJ3JlY2VudFF1ZXJpZXMnLCBbXSkucmV2ZXJzZSgpO1xuXG4gIGZvciAobGV0IGkgPSAwOyBpIDwgaGlzdG9yeS5sZW5ndGg7IGkrKykge1xuICAgIGhpc3RvcnlbaV0uZG9tYWluID0gaGlzdG9yeVtpXS51cmwubWF0Y2goL14oPzpodHRwcz86XFwvXFwvKT8oPzp3d3dcXC4pPyhbXlxcL10rKS9pKVsxXTtcbiAgfVxuXG4gIGNvbnN0IGhpc3RvcnlXaXRoTG9nb3MgPSBhZGRMb2dvcyhoaXN0b3J5KTtcbiAgY29uc3QgZGF0YSA9IG1peEhpc3RvcnlXaXRoUXVlcmllcyhxdWVyaWVzLCBoaXN0b3J5V2l0aExvZ29zKTtcbiAgSGlzdG9yeS5kaXNwbGF5RGF0YShkYXRhLCBIaXN0b3J5LnNob3dPbmx5RmF2b3JpdGUpO1xufVxuXG5mdW5jdGlvbiBzaG93RmF2b3JpdGVzKGZhdm9yaXRlcykge1xuICBjbGVhclRpbWVvdXQoaGlzdG9yeVRpbWVyKTtcblxuICBhbGxGYXZvcml0ZXMgPSBmYXZvcml0ZXM7XG5cbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBmYXZvcml0ZXMubGVuZ3RoOyBpKyspIHtcbiAgICBmYXZvcml0ZXNbaV0uZG9tYWluID0gZmF2b3JpdGVzW2ldLnVybC5tYXRjaCgvXig/Omh0dHBzPzpcXC9cXC8pPyg/Ond3d1xcLik/KFteXFwvXSspL2kpWzFdO1xuICB9XG5cbiAgY29uc3QgZmF2b3JpdGVzV2l0aExvZ29zID0gYWRkTG9nb3MoZmF2b3JpdGVzKTtcblxuICBIaXN0b3J5LmRpc3BsYXlEYXRhKGZhdm9yaXRlc1dpdGhMb2dvcywgSGlzdG9yeS5zaG93T25seUZhdm9yaXRlKTtcbn1cblxuZnVuY3Rpb24gYWRkTG9nb3MobGlzdCkge1xuICByZXR1cm4gbGlzdC5tYXAoaXRlbSA9PiB7XG4gICAgY29uc3QgZGV0YWlscyA9IHV0aWxzLmdldERldGFpbHNGcm9tVXJsKGl0ZW0udXJsKTtcbiAgICBpdGVtLmxvZ28gPSB1dGlscy5nZXRMb2dvRGV0YWlscyhkZXRhaWxzKTtcbiAgICByZXR1cm4gaXRlbTtcbiAgfSk7XG59XG5cbmZ1bmN0aW9uIHNlbmRTaG93VGVsZW1ldHJ5KGRhdGEpIHtcbiAgY29uc3QgcXVlcnlDb3VudCA9IGRhdGEuZmlsdGVyKGZ1bmN0aW9uIChpdGVtKSB7IHJldHVybiBpdGVtLnF1ZXJ5OyB9KS5sZW5ndGgsXG4gICAgICB1cmxDb3VudCA9IGRhdGEuZmlsdGVyKGZ1bmN0aW9uIChpdGVtKSB7IHJldHVybiBpdGVtLnVybDsgfSkubGVuZ3RoO1xuICB1dGlscy50ZWxlbWV0cnkoe1xuICAgIHR5cGU6IEhpc3Rvcnkuc2hvd09ubHlGYXZvcml0ZSA/ICdmYXZvcml0ZXMnIDogJ2hpc3RvcnknLFxuICAgIGFjdGlvbjogJ3Nob3cnLFxuICAgIGFjdGl2ZV9kYXlfY291bnQ6IGRhdGEubGVuZ3RoIC0gcXVlcnlDb3VudCAtIHVybENvdW50LFxuICAgIHF1ZXJ5X2NvdW50OiBxdWVyeUNvdW50LFxuICAgIHVybF9jb3VudDogdXJsQ291bnRcbiAgfSk7XG59XG5cblxuZnVuY3Rpb24gbWl4SGlzdG9yeVdpdGhRdWVyaWVzKHF1ZXJpZXMsIGhpc3RvcnkpIHtcbiAgbGV0IGRhdGEgPSBbXTtcbiAgbGV0IGhpID0gMDtcbiAgbGV0IHFpID0gMDtcbiAgbGV0IGRhdGUgPSAnJztcbiAgd2hpbGUgKHRydWUpIHtcbiAgICBpZiAoaGkgPj0gaGlzdG9yeS5sZW5ndGggfHwgcWkgPj0gcXVlcmllcy5sZW5ndGgpIHtcbiAgICAgIGJyZWFrO1xuICAgIH1cblxuICAgIGlmIChoaXN0b3J5W2hpXS50aW1lc3RhbXAgPD0gcXVlcmllc1txaV0udGltZXN0YW1wKSB7XG4gICAgICBpZiAoZ2V0RGF0ZUZyb21UaW1lc3RhbXAoaGlzdG9yeVtoaV0udGltZXN0YW1wKSAhPT0gZGF0ZSkge1xuICAgICAgICBkYXRhLnB1c2goe2RhdGU6IGdldERhdGVGcm9tVGltZXN0YW1wKGhpc3RvcnlbaGldLnRpbWVzdGFtcCl9KTtcbiAgICAgICAgZGF0ZSA9IGdldERhdGVGcm9tVGltZXN0YW1wKGhpc3RvcnlbaGldLnRpbWVzdGFtcCk7XG4gICAgICB9XG4gICAgICBkYXRhLnB1c2goaGlzdG9yeVtoaV0pO1xuXG4gICAgICBoaSsrO1xuICAgIH0gZWxzZSB7XG4gICAgICBpZiAoZ2V0RGF0ZUZyb21UaW1lc3RhbXAocXVlcmllc1txaV0udGltZXN0YW1wKSAhPT0gZGF0ZSkge1xuICAgICAgICBkYXRhLnB1c2goe2RhdGU6IGdldERhdGVGcm9tVGltZXN0YW1wKHF1ZXJpZXNbcWldLnRpbWVzdGFtcCl9KTtcbiAgICAgICAgZGF0ZSA9IGdldERhdGVGcm9tVGltZXN0YW1wKHF1ZXJpZXNbcWldLnRpbWVzdGFtcCk7XG4gICAgICB9XG4gICAgICBkYXRhLnB1c2gocXVlcmllc1txaV0pO1xuICAgICAgcWkrKztcbiAgICB9XG4gIH1cbiAgd2hpbGUgKGhpIDwgaGlzdG9yeS5sZW5ndGgpIHtcbiAgICBpZiAoZ2V0RGF0ZUZyb21UaW1lc3RhbXAoaGlzdG9yeVtoaV0udGltZXN0YW1wKSAhPT0gZGF0ZSkge1xuICAgICAgZGF0YS5wdXNoKHtkYXRlOiBnZXREYXRlRnJvbVRpbWVzdGFtcChoaXN0b3J5W2hpXS50aW1lc3RhbXApfSk7XG4gICAgICBkYXRlID0gZ2V0RGF0ZUZyb21UaW1lc3RhbXAoaGlzdG9yeVtoaV0udGltZXN0YW1wKTtcbiAgICB9XG4gICAgZGF0YS5wdXNoKGhpc3RvcnlbaGldKTtcbiAgICBoaSsrO1xuICB9XG4gIHdoaWxlIChxaSA8IHF1ZXJpZXMubGVuZ3RoKSB7XG4gICAgaWYgKGdldERhdGVGcm9tVGltZXN0YW1wKHF1ZXJpZXNbcWldLnRpbWVzdGFtcCkgIT09IGRhdGUpIHtcbiAgICAgIGRhdGEucHVzaCh7ZGF0ZTogZ2V0RGF0ZUZyb21UaW1lc3RhbXAocXVlcmllc1txaV0udGltZXN0YW1wKX0pO1xuICAgICAgZGF0ZSA9IGdldERhdGVGcm9tVGltZXN0YW1wKHF1ZXJpZXNbcWldLnRpbWVzdGFtcCk7XG4gICAgfVxuICAgIGRhdGEucHVzaChxdWVyaWVzW3FpXSk7XG4gICAgcWkrKztcbiAgfVxuXG4gIHJldHVybiBkYXRhO1xufVxuXG5mdW5jdGlvbiBkaXNwbGF5RGF0YShkYXRhLCBpc0Zhdm9yaXRlID0gZmFsc2UpIHtcbiAgaWYgKCFoYW5kbGViYXJzLnRwbENhY2hlWydjb252ZXJzYXRpb25zJ10pIHtcbiAgICByZXR1cm4gc2V0VGltZW91dChIaXN0b3J5LmRpc3BsYXlEYXRhLCAxMDAsIGRhdGEpO1xuICB9XG5cbiAgY29uc3QgdGVtcGxhdGUgPSBpc0Zhdm9yaXRlID8gJ2Zhdm9yaXRlcycgOiAnY29udmVyc2F0aW9ucyc7XG4gIGRvY3VtZW50LmJvZHkuaW5uZXJIVE1MID0gaGFuZGxlYmFycy50cGxDYWNoZVt0ZW1wbGF0ZV0oe2RhdGE6IGRhdGF9KTtcblxuICBjb25zdCBCID0gZG9jdW1lbnQuYm9keSxcbiAgICAgIEggPSBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQ7XG5cbiAgbGV0IGhlaWdodDtcblxuICBpZiAodHlwZW9mIGRvY3VtZW50LmhlaWdodCAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIGhlaWdodCA9IGRvY3VtZW50LmhlaWdodDsgLy8gRm9yIHdlYmtpdCBicm93c2Vyc1xuICB9IGVsc2Uge1xuICAgICAgaGVpZ2h0ID0gTWF0aC5tYXgoIEIuc2Nyb2xsSGVpZ2h0LCBCLm9mZnNldEhlaWdodCxILmNsaWVudEhlaWdodCwgSC5zY3JvbGxIZWlnaHQsIEgub2Zmc2V0SGVpZ2h0ICk7XG4gIH1cblxuICBkb2N1bWVudC5ib2R5LnNjcm9sbFRvcCA9IGhlaWdodCArIDEwMDtcblxuICBhdHRhY2hMaXN0ZW5lcnMoZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2NvbnRhaW5lcicpKTtcbiAgSGlzdG9yeS5zZW5kU2hvd1RlbGVtZXRyeShkYXRhKTtcbn1cblxuZnVuY3Rpb24gZ2V0RGF0ZUZyb21UaW1lc3RhbXAodGltZSkge1xuICAgIGNvbnN0IGQgPSBuZXcgRGF0ZSh0aW1lKTtcblxuICAgIGxldCBkYXlzID0gZC5nZXREYXRlKCk7XG4gICAgZGF5cyA9IGRheXMgPiA5ID8gZGF5cyA6ICcwJyArIGRheXM7XG5cbiAgICBsZXQgbW9udGhzID0gZC5nZXRNb250aCgpKzE7XG4gICAgbW9udGhzID0gbW9udGhzID4gOSA/IG1vbnRocyA6ICcwJyArIG1vbnRocztcblxuICAgIGNvbnN0IHllYXIgPSBkLmdldEZ1bGxZZWFyKCk7XG5cbiAgICBjb25zdCBmb3JtYXRlZERhdGUgPSBkYXlzICsgJy4nICsgbW9udGhzICsgJy4nICsgeWVhcjtcbiAgICByZXR1cm4gZm9ybWF0ZWREYXRlO1xufVxuZnVuY3Rpb24gcmVtb3ZlUXVlcnkoaWQpIHtcbiAgbGV0IHF1ZXJpZXMgPSB1dGlscy5nZXRMb2NhbFN0b3JhZ2UoKS5nZXRPYmplY3QoJ3JlY2VudFF1ZXJpZXMnLCBbXSk7XG5cbiAgcXVlcmllcyA9IHF1ZXJpZXMuZmlsdGVyKHF1ZXJ5ID0+IGlkICE9PSBxdWVyeS5pZCk7XG4gIHV0aWxzLmdldExvY2FsU3RvcmFnZSgpLnNldE9iamVjdCgncmVjZW50UXVlcmllcycsIHF1ZXJpZXMpO1xufVxuXG5mdW5jdGlvbiByZW1vdmVIaXN0b3J5SXRlbShpZCkge1xuICBhbGxIaXN0b3J5ID0gYWxsSGlzdG9yeS5maWx0ZXIoaGlzdG9yeSA9PiBpZCAhPT0gaGlzdG9yeS5pZCk7XG4gIG9zQVBJLnJlbW92ZUhpc3RvcnlJdGVtcyhbaWRdKTtcbn1cblxuZnVuY3Rpb24gcmVtb3ZlSXRlbShpdGVtKSB7XG4gIGNvbnN0IGlkID0gcGFyc2VJbnQoaXRlbS5kYXRhc2V0LmlkKTtcbiAgaXRlbS5nZXRBdHRyaWJ1dGUoJ2NsYXNzJykuaW5kZXhPZigncXVlc3Rpb24nKSA+PSAwID8gcmVtb3ZlUXVlcnkoaWQpIDogcmVtb3ZlSGlzdG9yeUl0ZW0oaWQpO1xufVxuXG5mdW5jdGlvbiB1bmZhdm9yaXRlSXRlbShpdGVtKSB7XG4gIGNvbnN0IHVybCA9IGl0ZW0uZ2V0QXR0cmlidXRlKCdkYXRhJyk7XG4gIGNvbnN0IHRpdGxlID0gaXRlbS5kYXRhc2V0LnRpdGxlO1xuICBvc0FQSS5zZXRGYXZvcml0ZXMoW3t0aXRsZSwgdXJsfV0sIGZhbHNlKTtcbn1cblxuZnVuY3Rpb24gaW5pdChvbmx5RmF2b3JpdGVzKSB7XG4gIG1pZ3JhdGVRdWVyaWVzKCk7XG4gIEhpc3Rvcnkuc2hvd09ubHlGYXZvcml0ZSA9IG9ubHlGYXZvcml0ZXM7XG4gIHVwZGF0ZSgpO1xufVxuXG5mdW5jdGlvbiB1cGRhdGUoKSB7XG4gIGNvbnN0IGNhbGxiYWNrID0gSGlzdG9yeS5zaG93T25seUZhdm9yaXRlID8gc2hvd0Zhdm9yaXRlcyA6IHNob3dIaXN0b3J5O1xuICBoaXN0b3J5VGltZXIgPSBzZXRUaW1lb3V0KGNhbGxiYWNrLCA1MDAsIFtdKTtcbiAgSGlzdG9yeS5zaG93T25seUZhdm9yaXRlID8gb3NBUEkuZ2V0RmF2b3JpdGVzKCdIaXN0b3J5LnNob3dGYXZvcml0ZXMnKSA6IG9zQVBJLmdldEhpc3RvcnlJdGVtcygnSGlzdG9yeS5zaG93SGlzdG9yeScpO1xufVxuXG5mdW5jdGlvbiBjbGVhckhpc3RvcnkoKSB7XG4gIHV0aWxzLmdldExvY2FsU3RvcmFnZSgpLnNldE9iamVjdCgncmVjZW50UXVlcmllcycsIFtdKTtcbn1cblxuZnVuY3Rpb24gY2xlYXJGYXZvcml0ZXMoKSB7XG4gIHV0aWxzLmdldExvY2FsU3RvcmFnZSgpLnNldE9iamVjdCgnZmF2b3JpdGVRdWVyaWVzJywgW10pO1xufVxuXG5mdW5jdGlvbiBvbkVsZW1lbnRDbGljayhldmVudCkge1xuICBjb25zdCBlbGVtZW50ID0gZXZlbnQuc3JjRXZlbnQuY3VycmVudFRhcmdldDtcbiAgY29uc3QgdHlwZSA9IGVsZW1lbnQuZ2V0QXR0cmlidXRlKCdjbGFzcycpO1xuICBjb25zdCBjbGlja0FjdGlvbiA9IHR5cGUuaW5kZXhPZigncXVlc3Rpb24nKSA+PSAwID8gb3NBUEkubm90aWZ5UXVlcnkgOiBvc0FQSS5vcGVuTGluaztcbiAgY2xpY2tBY3Rpb24oZWxlbWVudC5nZXRBdHRyaWJ1dGUoJ2RhdGEnKSk7XG4gIHNlbmRDbGlja1RlbGVtZXRyeShlbGVtZW50KTtcbn1cblxuZnVuY3Rpb24gc2VuZENsaWNrVGVsZW1ldHJ5KGVsZW1lbnQpIHtcbiAgY29uc3QgdGFyZ2VUeXBlID0gZWxlbWVudC5jbGFzc05hbWUuaW5kZXhPZigncXVlc3Rpb24nKSA+PSAwID8gJ3F1ZXJ5JyA6ICd1cmwnO1xuICAgIHV0aWxzLnRlbGVtZXRyeSh7XG4gICAgICB0eXBlOiBIaXN0b3J5LnNob3dPbmx5RmF2b3JpdGUgPyAnZmF2b3JpdGVzJyA6ICdoaXN0b3J5JyxcbiAgICAgIGFjdGlvbjogJ2NsaWNrJyxcbiAgICAgIHRhcmdldF90eXBlOiB0YXJnZVR5cGUsXG4gICAgICB0YXJnZXRfaW5kZXg6IHBhcnNlSW50KGVsZW1lbnQuZGF0YXNldC5pbmRleCksXG4gICAgICB0YXJnZXRfbGVuZ3RoOiBlbGVtZW50LmdldEF0dHJpYnV0ZSgnZGF0YScpLmxlbmd0aCxcbiAgICAgIHRhcmdldF90czogcGFyc2VJbnQoZWxlbWVudC5kYXRhc2V0LnRpbWVzdGFtcClcbiAgICB9KTtcbn1cblxuZnVuY3Rpb24gY3Jvc3NUcmFuc2Zvcm0gKGVsZW1lbnQsIHgpIHtcbiAgdmFyIHBsYXRmb3JtcyA9IFsnJywgJy13ZWJraXQtJywgJy1tcy0nXTtcbiAgcGxhdGZvcm1zLmZvckVhY2goZnVuY3Rpb24gKHBsYXRmb3JtKSB7XG4gICAgZWxlbWVudC5zdHlsZVtwbGF0Zm9ybSArICd0cmFuc2Zvcm0nXSA9ICd0cmFuc2xhdGUzZCgnKyB4ICsncHgsIDBweCwgMHB4KSc7XG4gIH0pO1xufVxuXG5mdW5jdGlvbiBpc0VsZW1lbnREYXRlKGVsZW1lbnQpIHtcbiAgcmV0dXJuICFlbGVtZW50LmRhdGFzZXQudGltZXN0YW1wXG59XG5cbmZ1bmN0aW9uIGF0dGFjaExpc3RlbmVycyhsaXN0KSB7XG4gIHZhciBsaXN0SXRlbXMgPSBsaXN0LmdldEVsZW1lbnRzQnlUYWdOYW1lKFwibGlcIik7XG5cbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBsaXN0SXRlbXMubGVuZ3RoOyBpKyspIHtcbiAgICBpZighaXNFbGVtZW50RGF0ZShsaXN0SXRlbXNbaV0pKSB7XG4gICAgICBuZXcgSGFtbWVyKGxpc3RJdGVtc1tpXSkub24oJ3BhbicsIG9uU3dpcGUpO1xuICAgICAgbmV3IEhhbW1lcihsaXN0SXRlbXNbaV0pLm9uKCdwYW5lbmQnLCBvblN3aXBlRW5kKTtcbiAgICAgIG5ldyBIYW1tZXIobGlzdEl0ZW1zW2ldKS5vbigndGFwJywgb25FbGVtZW50Q2xpY2spO1xuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiByZW1vdmVEb21FbGVtZW50KGVsZW1lbnQpIHtcbiAgY29uc3QgcHJldiA9IGVsZW1lbnQucHJldmlvdXNFbGVtZW50U2libGluZztcbiAgY29uc3QgbmV4dCA9IGVsZW1lbnQubmV4dEVsZW1lbnRTaWJsaW5nO1xuICBpZiAocHJldiAmJiBpc0VsZW1lbnREYXRlKHByZXYpKSB7XG4gICAgaWYgKCFuZXh0IHx8IGlzRWxlbWVudERhdGUobmV4dCkpIHtcbiAgICAgIGVsZW1lbnQucGFyZW50RWxlbWVudC5yZW1vdmVDaGlsZChwcmV2KTtcbiAgICB9XG4gIH1cbiAgZWxlbWVudC5wYXJlbnRFbGVtZW50LnJlbW92ZUNoaWxkKGVsZW1lbnQpO1xufVxuXG5mdW5jdGlvbiBvblN3aXBlKGUpIHtcbiAgY3Jvc3NUcmFuc2Zvcm0oZS5zcmNFdmVudC5jdXJyZW50VGFyZ2V0LCBlLmRlbHRhWCk7XG59XG5mdW5jdGlvbiBvblN3aXBlRW5kKGUpIHtcbiAgY29uc3QgZWxlbWVudCA9IGUuc3JjRXZlbnQuY3VycmVudFRhcmdldDtcbiAgaWYgKG1hdGguYWJzKGUudmVsb2NpdHlYKSA8IC0xIHx8IG1hdGguYWJzKGUuZGVsdGFYKSA+IDE1MCkge1xuICAgIEhpc3Rvcnkuc2hvd09ubHlGYXZvcml0ZSA/IHVuZmF2b3JpdGVJdGVtKGVsZW1lbnQpIDogcmVtb3ZlSXRlbShlbGVtZW50KTtcbiAgICByZW1vdmVEb21FbGVtZW50KGVsZW1lbnQpO1xuICB9IGVsc2Uge1xuICAgIGNyb3NzVHJhbnNmb3JtKGVsZW1lbnQsIDApO1xuICB9XG59XG5cblxuLyoqXG4gIFRoaXMgZnVuY3Rpb24gaXMgZm9yIG1pZ3JhdGlvbiBvZiBoaXN0b3J5IGFuZCBmYXZvcml0ZSBxdWVyaWVzXG4gIHRvIGV4dGVuc2lvbiB2ZXJzaW9uIE1vYmlsZSBFeHRlbnNpb24gMy41LjJcbioqL1xuZnVuY3Rpb24gbWlncmF0ZVF1ZXJpZXMoKSB7XG4gIGlmICh1dGlscy5nZXRMb2NhbFN0b3JhZ2UoKS5nZXRJdGVtKCdpc0Zhdm9yaXRlc1JlZmFjdG9yZWQnKSkge1xuICAgIHJldHVybjtcbiAgfVxuICBsZXQgcXVlcmllcyA9IHV0aWxzLmdldExvY2FsU3RvcmFnZSgpLmdldE9iamVjdCgncmVjZW50UXVlcmllcycsIFtdKTtcbiAgbGV0IGZhdm9yaXRlUXVlcmllcyA9IHV0aWxzLmdldExvY2FsU3RvcmFnZSgpLmdldE9iamVjdCgnZmF2b3JpdGVRdWVyaWVzJywgW10pO1xuICBxdWVyaWVzID0gcXVlcmllcy5tYXAocXVlcnkgPT4ge1xuICAgIGlmIChxdWVyeS5mYXZvcml0ZSkge1xuICAgICAgZmF2b3JpdGVRdWVyaWVzLnVuc2hpZnQoe3F1ZXJ5OiBxdWVyeS5xdWVyeSwgdGltZXN0YW1wOiBxdWVyeS50aW1lc3RhbXB9KTtcbiAgICB9XG4gICAgZGVsZXRlIHF1ZXJ5LmZhdm9yaXRlO1xuICAgIHJldHVybiBxdWVyeTtcbiAgfSk7XG4gIHV0aWxzLmdldExvY2FsU3RvcmFnZSgpLnNldE9iamVjdCgncmVjZW50UXVlcmllcycsIHF1ZXJpZXMpO1xuICB1dGlscy5nZXRMb2NhbFN0b3JhZ2UoKS5zZXRPYmplY3QoJ2Zhdm9yaXRlUXVlcmllcycsIGZhdm9yaXRlUXVlcmllcyk7XG4gIHV0aWxzLmdldExvY2FsU3RvcmFnZSgpLnNldEl0ZW0oJ2lzRmF2b3JpdGVzUmVmYWN0b3JlZCcsIHRydWUpO1xufVxuXG5cbnZhciBIaXN0b3J5ID0ge1xuICBpbml0LFxuICB1cGRhdGUsXG4gIHNob3dIaXN0b3J5LFxuICBzaG93RmF2b3JpdGVzLFxuICBjbGVhckhpc3RvcnksXG4gIGNsZWFyRmF2b3JpdGVzLFxuICBkaXNwbGF5RGF0YSxcbiAgc2VuZFNob3dUZWxlbWV0cnksXG4gIHNob3dPbmx5RmF2b3JpdGU6IGZhbHNlXG59O1xuXG5leHBvcnQgZGVmYXVsdCBIaXN0b3J5O1xuIl19