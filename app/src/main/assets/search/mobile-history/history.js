System.register('mobile-history/history', ['core/cliqz'], function (_export) {
  'use strict';
  /* global document, osAPI, Hammer, math */

  var environment, handlebars, utils, historyTimer, allHistory, allFavorites, History;

  function showHistory(history) {
    clearTimeout(historyTimer);

    allHistory = history;
    var queries = environment.getLocalStorage().getObject('recentQueries', []).reverse();

    for (var i = 0; i < history.length; i++) {
      history[i].domain = history[i].url.match(/^(?:https?:\/\/)?(?:www\.)?([^\/]+)/i)[1];
    }

    var historyWithLogos = addLogos(history);
    var data = mixHistoryWithQueries(queries, historyWithLogos);
    History.displayData(data, History.showOnlyFavorite);
  }

  function showFavorites(favorites) {
    clearTimeout(historyTimer);

    allFavorites = favorites;

    for (var i = 0; i < favorites.length; i++) {
      favorites[i].domain = favorites[i].url.match(/^(?:https?:\/\/)?(?:www\.)?([^\/]+)/i)[1];
    }

    var favoritesWithLogos = addLogos(favorites);

    History.displayData(favoritesWithLogos, History.showOnlyFavorite);
  }

  function addLogos(list) {
    return list.map(function (item) {
      var details = utils.getDetailsFromUrl(item.url);
      item.logo = utils.getLogoDetails(details);
      return item;
    });
  }

  function sendShowTelemetry(data) {
    var queryCount = data.filter(function (item) {
      return item.query;
    }).length,
        urlCount = data.filter(function (item) {
      return item.url;
    }).length;
    utils.telemetry({
      type: History.showOnlyFavorite ? 'favorites' : 'history',
      action: 'show',
      active_day_count: data.length - queryCount - urlCount,
      query_count: queryCount,
      url_count: urlCount
    });
  }

  function mixHistoryWithQueries(queries, history) {
    var data = [];
    var hi = 0;
    var qi = 0;
    var date = '';
    while (true) {
      if (hi >= history.length || qi >= queries.length) {
        break;
      }

      if (history[hi].timestamp <= queries[qi].timestamp) {
        if (getDateFromTimestamp(history[hi].timestamp) !== date) {
          data.push({ date: getDateFromTimestamp(history[hi].timestamp) });
          date = getDateFromTimestamp(history[hi].timestamp);
        }
        data.push(history[hi]);

        hi++;
      } else {
        if (getDateFromTimestamp(queries[qi].timestamp) !== date) {
          data.push({ date: getDateFromTimestamp(queries[qi].timestamp) });
          date = getDateFromTimestamp(queries[qi].timestamp);
        }
        data.push(queries[qi]);
        qi++;
      }
    }
    while (hi < history.length) {
      if (getDateFromTimestamp(history[hi].timestamp) !== date) {
        data.push({ date: getDateFromTimestamp(history[hi].timestamp) });
        date = getDateFromTimestamp(history[hi].timestamp);
      }
      data.push(history[hi]);
      hi++;
    }
    while (qi < queries.length) {
      if (getDateFromTimestamp(queries[qi].timestamp) !== date) {
        data.push({ date: getDateFromTimestamp(queries[qi].timestamp) });
        date = getDateFromTimestamp(queries[qi].timestamp);
      }
      data.push(queries[qi]);
      qi++;
    }

    return data;
  }

  function displayData(data) {
    var isFavorite = arguments.length <= 1 || arguments[1] === undefined ? false : arguments[1];

    if (!handlebars.tplCache['conversations']) {
      return setTimeout(History.displayData, 100, data);
    }

    var template = isFavorite ? 'favorites' : 'conversations';
    document.body.innerHTML = handlebars.tplCache[template]({ data: data });

    var B = document.body,
        H = document.documentElement;

    var height = undefined;

    if (typeof document.height !== 'undefined') {
      height = document.height; // For webkit browsers
    } else {
        height = Math.max(B.scrollHeight, B.offsetHeight, H.clientHeight, H.scrollHeight, H.offsetHeight);
      }

    document.body.scrollTop = height + 100;

    attachListeners(document.getElementById('container'));
    History.sendShowTelemetry(data);
  }

  function getDateFromTimestamp(time) {
    var d = new Date(time);

    var days = d.getDate();
    days = days > 9 ? days : '0' + days;

    var months = d.getMonth() + 1;
    months = months > 9 ? months : '0' + months;

    var year = d.getFullYear();

    var formatedDate = days + '.' + months + '.' + year;
    return formatedDate;
  }

  function removeQuery(id) {
    var queries = environment.getLocalStorage().getObject('recentQueries', []);

    queries = queries.filter(function (query) {
      return id !== query.id;
    });
    environment.getLocalStorage().setObject('recentQueries', queries);
  }

  function removeHistoryItem(id) {
    allHistory = allHistory.filter(function (history) {
      return id !== history.id;
    });
    osAPI.removeHistoryItems([id]);
  }

  function removeItem(item) {
    var id = parseInt(item.dataset.id);
    item.getAttribute('class').indexOf('question') >= 0 ? removeQuery(id) : removeHistoryItem(id);
  }

  function unfavoriteItem(item) {
    var url = item.getAttribute('data');
    var title = item.dataset.title;
    osAPI.setFavorites([{ title: title, url: url }], false);
  }

  function init(onlyFavorites) {
    migrateQueries();
    History.showOnlyFavorite = onlyFavorites;
    update();
  }

  function update() {
    var callback = History.showOnlyFavorite ? showFavorites : showHistory;
    historyTimer = setTimeout(callback, 500, []);
    History.showOnlyFavorite ? osAPI.getFavorites('History.showFavorites') : osAPI.getHistoryItems('History.showHistory');
  }

  function clearHistory() {
    environment.getLocalStorage().setObject('recentQueries', []);
  }

  function clearFavorites() {
    environment.getLocalStorage().setObject('favoriteQueries', []);
  }

  function onElementClick(event) {
    var element = event.srcEvent.currentTarget;
    var type = element.getAttribute('class');
    var clickAction = type.indexOf('question') >= 0 ? osAPI.notifyQuery : osAPI.openLink;
    clickAction(element.getAttribute('data'));
    sendClickTelemetry(element);
  }

  function sendClickTelemetry(element) {
    var targeType = element.className.indexOf('question') >= 0 ? 'query' : 'url';
    utils.telemetry({
      type: History.showOnlyFavorite ? 'favorites' : 'history',
      action: 'click',
      target_type: targeType,
      target_index: parseInt(element.dataset.index),
      target_length: element.getAttribute('data').length,
      target_ts: parseInt(element.dataset.timestamp)
    });
  }

  function crossTransform(element, x) {
    var platforms = ['', '-webkit-', '-ms-'];
    platforms.forEach(function (platform) {
      element.style[platform + 'transform'] = 'translate3d(' + x + 'px, 0px, 0px)';
    });
  }

  function isElementDate(element) {
    return !element.dataset.timestamp;
  }

  function attachListeners(list) {
    var listItems = list.getElementsByTagName("li");

    for (var i = 0; i < listItems.length; i++) {
      if (!isElementDate(listItems[i])) {
        new Hammer(listItems[i]).on('pan', onSwipe);
        new Hammer(listItems[i]).on('panend', onSwipeEnd);
        new Hammer(listItems[i]).on('tap', onElementClick);
      }
    }
  }

  function removeDomElement(element) {
    var prev = element.previousElementSibling;
    var next = element.nextElementSibling;
    if (prev && isElementDate(prev)) {
      if (!next || isElementDate(next)) {
        element.parentElement.removeChild(prev);
      }
    }
    element.parentElement.removeChild(element);
  }

  function onSwipe(e) {
    crossTransform(e.srcEvent.currentTarget, math.min(e.deltaX, 0));
  }
  function onSwipeEnd(e) {
    var element = e.srcEvent.currentTarget;
    if (e.velocityX < -0.6 || e.distance > 200 || e.center.x < 50) {
      History.showOnlyFavorite ? unfavoriteItem(element) : removeItem(element);
      removeDomElement(element);
    } else {
      crossTransform(element, 0);
    }
  }

  /**
    This function is for migration of history and favorite queries
    to extension version Mobile Extension 3.5.2
  **/
  function migrateQueries() {
    if (environment.getLocalStorage().getItem('isFavoritesRefactored')) {
      return;
    }
    var queries = environment.getLocalStorage().getObject('recentQueries', []);
    var favoriteQueries = environment.getLocalStorage().getObject('favoriteQueries', []);
    queries = queries.map(function (query) {
      if (query.favorite) {
        favoriteQueries.unshift({ query: query.query, timestamp: query.timestamp });
      }
      delete query.favorite;
      return query;
    });
    environment.getLocalStorage().setObject('recentQueries', queries);
    environment.getLocalStorage().setObject('favoriteQueries', favoriteQueries);
    environment.getLocalStorage().setItem('isFavoritesRefactored', true);
  }

  return {
    setters: [function (_coreCliqz) {
      environment = _coreCliqz.environment;
      handlebars = _coreCliqz.handlebars;
      utils = _coreCliqz.utils;
    }],
    execute: function () {
      allHistory = [];
      allFavorites = [];
      History = {
        init: init,
        update: update,
        showHistory: showHistory,
        showFavorites: showFavorites,
        clearHistory: clearHistory,
        clearFavorites: clearFavorites,
        displayData: displayData,
        sendShowTelemetry: sendShowTelemetry,
        showOnlyFavorite: false
      };

      _export('default', History);
    }
  };
});
//# sourceMappingURL=data:application/json;base64,