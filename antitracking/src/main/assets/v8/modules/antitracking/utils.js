System.register('antitracking/utils', ['core/gzip'], function (_export) {
  'use strict';

  var compress;

  _export('compressionAvailable', compressionAvailable);

  _export('compressJSONToBase64', compressJSONToBase64);

  _export('splitTelemetryData', splitTelemetryData);

  _export('generatePayload', generatePayload);

  function _arrayBufferToBase64(buffer) {
    var binary = '';
    var bytes = new Uint8Array(buffer);
    var len = bytes.byteLength;
    for (var i = 0; i < len; i++) {
      binary += String.fromCharCode(bytes[i]);
    }
    return btoa(binary);
  }

  function _base64ToArrayBuffer(base64) {
    var binary_string = window.atob(base64);
    var len = binary_string.length;
    var bytes = new Uint8Array(len);
    for (var i = 0; i < len; i++) {
      bytes[i] = binary_string.charCodeAt(i);
    }
    return bytes.buffer;
  }

  function compressionAvailable() {
    return compress !== false;
  }

  function compressJSONToBase64(obj) {
    var bytes = compress(JSON.stringify(obj));
    return _arrayBufferToBase64(bytes);
  }

  function splitTelemetryData(data, bucketSize) {
    var acc = 0;
    var bucket = {};
    var splitData = [];
    for (var k in data) {
      var _length = JSON.stringify(data[k]).length;
      // full bucket
      if (acc != 0 && acc + _length > bucketSize) {
        // full bucket, push it
        splitData.push(bucket);
        bucket = {};
        acc = 0;
      }
      acc += _length;
      bucket[k] = data[k];
    }
    if (Object.keys(bucket).length > 0) {
      splitData.push(bucket);
    }
    return splitData;
  }

  function generatePayload(data, ts, instant, attachAttrs) {
    var payl = {
      'data': data,
      'ts': ts,
      'anti-duplicates': Math.floor(Math.random() * 10000000)
    };
    if (instant) payl['instant'] = true;
    if (attachAttrs) {
      for (var k in attachAttrs) {
        payl[k] = attachAttrs[k];
      }
    }
    return payl;
  }

  return {
    setters: [function (_coreGzip) {
      compress = _coreGzip.compress;
    }],
    execute: function () {}
  };
});
//# sourceMappingURL=data:application/json;base64,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QU0sRUFBRSxHQUFHLFFBQVEsQ0FBQztLQUMxRCxDQUFDO0FBQ0YsUUFBSSxPQUFPLEVBQ1AsSUFBSSxDQUFDLFNBQVMsQ0FBQyxHQUFHLElBQUksQ0FBQztBQUMzQixRQUFJLFdBQVcsRUFBRTtBQUNmLFdBQUssSUFBTSxDQUFDLElBQUksV0FBVyxFQUFFO0FBQzNCLFlBQUksQ0FBQyxDQUFDLENBQUMsR0FBRyxXQUFXLENBQUMsQ0FBQyxDQUFDLENBQUM7T0FDMUI7S0FDRjtBQUNELFdBQU8sSUFBSSxDQUFDO0dBQ2Y7Ozs7MkJBbkVRLFFBQVEiLCJmaWxlIjoiYW50aXRyYWNraW5nL3V0aWxzLmVzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgY29tcHJlc3MgfSBmcm9tICdjb3JlL2d6aXAnO1xuXG5mdW5jdGlvbiBfYXJyYXlCdWZmZXJUb0Jhc2U2NCggYnVmZmVyICkge1xuICAgIHZhciBiaW5hcnkgPSAnJztcbiAgICB2YXIgYnl0ZXMgPSBuZXcgVWludDhBcnJheSggYnVmZmVyICk7XG4gICAgdmFyIGxlbiA9IGJ5dGVzLmJ5dGVMZW5ndGg7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW47IGkrKykge1xuICAgICAgICBiaW5hcnkgKz0gU3RyaW5nLmZyb21DaGFyQ29kZSggYnl0ZXNbIGkgXSApO1xuICAgIH1cbiAgICByZXR1cm4gYnRvYSggYmluYXJ5ICk7XG59XG5cbmZ1bmN0aW9uIF9iYXNlNjRUb0FycmF5QnVmZmVyKGJhc2U2NCkge1xuICAgIHZhciBiaW5hcnlfc3RyaW5nID0gIHdpbmRvdy5hdG9iKGJhc2U2NCk7XG4gICAgdmFyIGxlbiA9IGJpbmFyeV9zdHJpbmcubGVuZ3RoO1xuICAgIHZhciBieXRlcyA9IG5ldyBVaW50OEFycmF5KCBsZW4gKTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbjsgaSsrKSAgICAgICAge1xuICAgICAgICBieXRlc1tpXSA9IGJpbmFyeV9zdHJpbmcuY2hhckNvZGVBdChpKTtcbiAgICB9XG4gICAgcmV0dXJuIGJ5dGVzLmJ1ZmZlcjtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGNvbXByZXNzaW9uQXZhaWxhYmxlKCkge1xuICByZXR1cm4gY29tcHJlc3MgIT09IGZhbHNlO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gY29tcHJlc3NKU09OVG9CYXNlNjQob2JqKSB7XG4gIGNvbnN0IGJ5dGVzID0gY29tcHJlc3MoSlNPTi5zdHJpbmdpZnkob2JqKSk7XG4gIHJldHVybiBfYXJyYXlCdWZmZXJUb0Jhc2U2NChieXRlcyk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBzcGxpdFRlbGVtZXRyeURhdGEoZGF0YSwgYnVja2V0U2l6ZSkge1xuICBsZXQgYWNjID0gMDtcbiAgbGV0IGJ1Y2tldCA9IHt9O1xuICBjb25zdCBzcGxpdERhdGEgPSBbXTtcbiAgZm9yIChjb25zdCBrIGluIGRhdGEpIHtcbiAgICBjb25zdCBsZW5ndGggPSBKU09OLnN0cmluZ2lmeShkYXRhW2tdKS5sZW5ndGg7XG4gICAgLy8gZnVsbCBidWNrZXRcbiAgICBpZiAoIGFjYyAhPSAwICYmIGFjYyArIGxlbmd0aCA+IGJ1Y2tldFNpemUgKSB7XG4gICAgICAvLyBmdWxsIGJ1Y2tldCwgcHVzaCBpdFxuICAgICAgc3BsaXREYXRhLnB1c2goYnVja2V0KTtcbiAgICAgIGJ1Y2tldCA9IHt9O1xuICAgICAgYWNjID0gMDtcbiAgICB9XG4gICAgYWNjICs9IGxlbmd0aDtcbiAgICBidWNrZXRba10gPSBkYXRhW2tdO1xuICB9XG4gIGlmICggT2JqZWN0LmtleXMoYnVja2V0KS5sZW5ndGggPiAwICkge1xuICAgIHNwbGl0RGF0YS5wdXNoKGJ1Y2tldCk7XG4gIH1cbiAgcmV0dXJuIHNwbGl0RGF0YTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGdlbmVyYXRlUGF5bG9hZChkYXRhLCB0cywgaW5zdGFudCwgYXR0YWNoQXR0cnMpIHtcbiAgICB2YXIgcGF5bCA9IHtcbiAgICAgICAgJ2RhdGEnOiBkYXRhLFxuICAgICAgICAndHMnOiB0cyxcbiAgICAgICAgJ2FudGktZHVwbGljYXRlcyc6IE1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIDEwMDAwMDAwKVxuICAgIH07XG4gICAgaWYgKGluc3RhbnQpXG4gICAgICAgIHBheWxbJ2luc3RhbnQnXSA9IHRydWU7XG4gICAgaWYgKGF0dGFjaEF0dHJzKSB7XG4gICAgICBmb3IgKGNvbnN0IGsgaW4gYXR0YWNoQXR0cnMpIHtcbiAgICAgICAgcGF5bFtrXSA9IGF0dGFjaEF0dHJzW2tdO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gcGF5bDtcbn1cbiJdfQ==